#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re

# HTML 파일의 깨진 한국어 텍스트를 올바른 텍스트로 변경하는 매핑
korean_fixes = {
    # 네비게이션
    '??': '홈',
    '?�비??': '서비스',
    '?�활 ?�응 멘토�?': '생활 적응 멘토링',
    '?�르바이??지??': '아르바이트 지원',
    '?�작?�기': '시작하기',
    
    # 히어로 섹션
    '?�� ?�국 ?�활???�로???�작': '🌟 새로운 한국 생활의 시작',
    '?�국 ?�활 ?�응???�한 멘토링과 ?�전???�르바이??': '한국 생활 적응을 위한 멘토링과 안전한 아르바이트',
    '?�국??�??�착???�국?�을 ?�해 같�? �?�� ?�배?�이 ?�국 ?�활 ?�착, 문화 ?�응, ?�상 관리�? 1:1�??��??�립?�다. ?�전???�르바이??기회???�께 ?�공?�니??': '한국에 막 도착한 외국인을 위해 같은 국적 선배들이 한국 생활 정착, 문화 적응, 일상 관리를 1:1로 도와드립니다. 안전한 아르바이트 기회도 함께 제공됩니다',
    
    # 서비스 선택
    '?�떤 ?�비?��? 찾고 계신가??': '어떤 서비스를 찾고 계신가요?',
    
    # CTA 버튼
    '무료 ?�담 ?�청': '무료 상담 신청',
    '?�법??체크?�기': '합법성 체크하기',
    
    # 통계
    '?�공???�활 ?�응': '성공한 생활 적응',
    '만족??': '만족도',
    '지??': '지원',
    
    # 특징 카드
    '멘토�?': '멘토링',
    '?�전???�자�?': '안전한 일자리',
    '?�법??보장': '합법성 보장',
    
    # 섹션 제목
    '??MentorMatch Korea�??�택?�야 ?�까??': '왜 MentorMatch Korea를 선택해야 할까요?',
    
    # 모달
    '?�메???�전?�약': '이메일 사전등록',
    '?�비???�픈 ??가??먼�? ?�려?�리겠습?�다!': '서비스 오픈 시 가장 먼저 알려드리겠습니다!',
    '?�메??주소': '이메일 주소',
    '?�름': '이름',
    '관???�비??': '관심 서비스',
    '?�비???�택': '서비스 선택',
    '멘토�?지??': '멘토링 지원',
    '?�자�?지??': '일자리 지원',
    '????': '둘 다',
    '�??': '국가',
    '?�전?�약 ?�청': '사전등록 신청',
    
    # 설명
    '?�국 ?�활 ?�응 멘토�?�??�전???�르바이??매칭 ?�비??': '한국 생활 적응 멘토링과 안전한 아르바이트 매칭 서비스',
    
    # 주석
    '?�비게이??': '네비게이션',
    '?�어 ?�택 - ?�른�??�단 코너': '언어 선택 - 오른쪽 상단 코너',
    '?�어�??�션': '히어로 섹션',
    '?�비??개요 ?�션': '서비스 개요 섹션',
    '?�메???�전?�약 모달': '이메일 사전등록 모달'
}

def fix_korean_in_file(file_path):
    """파일의 깨진 한국어를 수정합니다."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # 각 매핑에 대해 치환 수행
        for broken, fixed in korean_fixes.items():
            content = content.replace(broken, fixed)
        
        # 변경사항이 있는 경우에만 파일 저장
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"✅ 한국어 텍스트가 수정되었습니다: {file_path}")
            return True
        else:
            print(f"ℹ️  수정할 내용이 없습니다: {file_path}")
            return False
            
    except Exception as e:
        print(f"❌ 오류 발생: {e}")
        return False

if __name__ == "__main__":
    # HTML 파일 수정
    success = fix_korean_in_file("index.html")
    
    if success:
        print("\n🎉 모든 한국어 텍스트 수정이 완료되었습니다!")
    else:
        print("\n⚠️ 일부 파일에서 문제가 발생했습니다.")